#!/usr/bin/python3.5

import sh

def get_sessions():
    try:
        sessions = sh.tmux('list-sessions')
        sessions = [s.split(' ')[0][:-1] for s in sessions]
        return sessions
    except sh.ErrorReturnCode_1:
        return []

# setup Main

if 'Main' in get_sessions():
    print('Main exisis')
else:
    print('Creating Main Session')
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects',
            '-n', 'main',
            '-s', 'Main')
    sh.tmux('send', "ll\n")

# setup CMSv2

if 'CMSv2' in get_sessions():
    print("CMSv2 exists")
else:
    print("Creating CMSv2 session")
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/odm/cmsv2',
            '-n', 'main',
            '-s', 'CMSv2')

    sh.tmux('send', 'll\n')

    sh.tmux('new-window',
            '-n', 'status')
    sh.tmux('send', 'cd $HOME/projects/odm/cmsv2\n')
    sh.tmux('send', 'git status\n')

# setup GIS

if 'Hyperion' in get_sessions():
    print('Hyperion exists')
else:
    print('Creating Hyperion session')
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/tileoven',
            '-n', 'tileoven',
            '-s', 'Hyperion')
    sh.tmux('send', 'node index.js\n')

    sh.tmux('new-window',
            '-n', 'servers')
    sh.tmux('send', 'cd $HOME/projects/hyperion/tiles/server\n')
    sh.tmux('send', 'node index.js\n')

    sh.tmux('split-window', '-v')
    sh.tmux('send', 'cd $HOME/projects/hyperion/core/web\n')
    sh.tmux('send', 'gulp default\n')

    sh.tmux('new-window',
            '-n', 'main')
    sh.tmux('send', 'cd $HOME/projects/hyperion/core\n')

# setup Arcus

if 'Arcus' in get_sessions():
    print('Arcus exists')
else:
    print('Creating Arcus session')
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/odm/arcuscms',
            '-n', 'main',
            '-s', 'Arcus')

    sh.tmux('new-window',
            '-n', 'grunt')
    sh.tmux('send', "cd /home/julian/projects/odm/arcuscms\n")
    sh.tmux('send', "grunt default watch\n")

    sh.tmux('new-window',
            '-n', 'servers')
    sh.tmux('send', 'cd /home/julian/projects/odm/arcusapi\n')
    sh.tmux('send', '. pyenv/bin/activate\n')
    sh.tmux('send', './julian_uwsgi\n')

    sh.tmux('split-window', '-h')
    sh.tmux('send', 'cd /home/julian/projects/odm/arcusapi\n')
    sh.tmux('send', 'tail -f log/arcus-uwsgi/arcus-uwsgi.log\n')

    sh.tmux('new-window',
            '-n', 'arcusplayer')
    sh.tmux('send', 'cd /home/julian/projects/odm/arcusplayer\n')
    sh.tmux('send', '. pyenv/bin/activate\n')
    sh.tmux('split-window', '-h')
    sh.tmux('send', 'cd /home/julian/projects/odm/arcusplayer\n')
    sh.tmux('split-window', '-v')
    sh.tmux('send', 'cd /var/cache/pbuilder/result\n')


# setup Atlas

if 'Atlas' in get_sessions():
    print('Atlas exists')
else:
    print('Creating Atlas session')

    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/odm/atlas',
            '-n', 'main',
            '-s', 'Atlas')

    sh.tmux('send', 'git status\n')

    sh.tmux('new-window',
            '-n', 'tail')
    sh.tmux('send', 'cd /var/log/nginx\n')
    sh.tmux('send', 'tail -F -n 100 /var/log/nginx/access.log\n')

    sh.tmux('split-window', '-h')
    sh.tmux('send', 'cd /home/julian/projects/odm/arcusapi\n')
    sh.tmux('send', 'tail -f log/arcus-uwsgi/arcus-uwsgi.log\n')


# setup brightsign

if 'BrightSign' in get_sessions():
    print('BrightSign exists')
else:
    print('Creating BrightSign session')
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/odm/brightsign-changeconfig',
            '-n', 'runtools',
            '-s', 'BrightSign')
    sh.tmux('send', '. pyenv/bin/activate\n')
    sh.tmux('split-window', '-h')
    sh.tmux('send', 'cd /home/julian/projects/odm/brightsign-changeconfig\n')
    sh.tmux('send', 'cd processed/splinter\n')

    sh.tmux('new-window',
            '-n', 'edit')
    sh.tmux('send', 'git status\n')

# noise designer

if 'NoiseDes' in get_sessions():
    print('NoiseDes exists')
else:
    sh.tmux('new-session',
            '-d',
            '-c', '/home/julian/projects/noisedesigner',
            '-n', 'main',
            '-s', 'NoiseDes')

print('done')
print(get_sessions())
